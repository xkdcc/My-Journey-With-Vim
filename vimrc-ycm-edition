set nocompatible              " be improved, required
filetype off                  " required
set laststatus=2 " Let airline appear all the time

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required:
    Plugin 'VundleVim/Vundle.vim'
    Plugin 'bling/vim-airline'
    Plugin 'vim-airline/vim-airline-themes'
    Plugin 'kien/ctrlp.vim'
    Plugin 'tacahiroy/ctrlp-funky'
    Plugin 'bling/vim-bufferline'
    Plugin 'sjl/gundo.vim'
    Plugin 'scrooloose/nerdtree'
    Plugin 'majutsushi/tagbar'
    Plugin 'airblade/vim-gitgutter'
    Plugin 'mhinz/vim-signify'
    Plugin 'scrooloose/syntastic'
    Plugin 'jeetsukumaran/vim-buffergator'
    Plugin 'scrooloose/nerdcommenter'
    Plugin 'vim-scripts/DoxygenToolkit.vim'
    Plugin 'terryma/vim-expand-region'
    Plugin 'rosenfeld/conque-term'
    Plugin 'easymotion/vim-easymotion'
    Plugin 'haya14busa/incsearch.vim'
    Plugin 'haya14busa/incsearch-fuzzy.vim'
    Plugin 'haya14busa/incsearch-easymotion.vim'
    Plugin 'dkprice/vim-easygrep'
    Plugin 'SirVer/ultisnips'
    Plugin 'honza/vim-snippets'
    Plugin 'ycm-core/YouCompleteMe'
    Plugin 'davidhalter/jedi-vim'
    Plugin 'mfukar/robotframework-vim'
    Plugin 'xkdcc/Session-Viminfo-Management'
    Plugin 'ryanoasis/vim-devicons'
    Plugin 'Raimondi/delimitMate'
    Plugin 'yuttie/comfortable-motion.vim'
    Plugin 'dart-lang/dart-vim-plugin'
    Plugin 'thosakwe/vim-flutter'
    Plugin 'mileszs/ack.vim'
    Plugin 'fatih/vim-go'
    Plugin 'Yggdroot/indentLine'
    Plugin 'tpope/vim-surround'
    Plugin 'AndrewRadev/tagalong.vim'
    Plugin 'mhinz/vim-startify'

    " All of your Plugins must be added before the following line
    call vundle#end()            " required
    filetype plugin indent on    " required
    " To ignore plugin indent changes, instead use:
    "filetype plugin on
    "
    " Brief help
    " :PluginList       - lists configured plugins
    " :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
    " :PluginSearch foo - searches for foo; append `!` to refresh local cache
    " :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
    "
    " see :h vundle for more details or wiki for FAQ
    " Put your non-Plugin stuff after this line



"-----------------------------------------------------------------
" General Settings
"-----------------------------------------------------------------
source $VIMRUNTIME/vimrc_example.vim
" source $VIMRUNTIME/mswin.vim
set mouse=v
syntax on                   " Syntax hilighting
" set cc=80
filetype on
colorscheme molokai
filetype plugin on
" set cc=80                 " Set 80th column highlight
" highlight ColorColumn ctermbg=LightGrey guibg=DarkGrey " Set the color of 80th colmnn which has been highlighted
                            " this must be after colorscheme if the default highlight color is not you want.
set number                  " set line number
" set cursorline            " Don't recommend this settings, it would slow down VIM performance
set shiftwidth=4            " Set the amount of spaces you want for a deeper level, like in a code block
set softtabstop=4           " Number of spaces that a <Tab> counts for while performing editing, like inserting a <Tab> or using <BS>
set tabstop=4               " Number of spaces that a <Tab> in the file counts for
set expandtab
set nobackup                " Not make a backup if overwriting a file
" set autochdir             " When on, Vim will change the current working directory whenever you open a file, switch buffers, delete a buffer or open/close a window.
                            " When this option is on some plugins may not work.
filetype plugin indent on
set ignorecase smartcase
set nowrapscan              " Searches wrap around the end of the file.
set incsearch               " While typing a search command, show where the pattern, as it was typed so far, matches.
" set hlsearch                " When there is a previous search pattern, highlight all its matches. I comment it out as performance concerns
set noerrorbells            " Disavble ring the bell (beep or screen flash) for error messages.
set visualbell              " Disable visual bell
set t_vb=                   " Set visual bell
set magic                   "
set hidden                  " When off a buffer is unloaded when it is abandoned.
                            " When on a buffer becomes hidden when it is abandoned.
set guioptions-=T           " Hide tearoff menu items in GUI version of Vim
set guioptions-=m           " Hide menu in GUI version of Vim
set smartindent             " Do smart autoindenting when starting a new line
set backspace=indent,eol,start "
set foldenable
set foldmethod=marker       " Markers are used to specify folds.
set foldcolumn=0            " a column with the specified width is shown at the side of the window which indicates open and closed folds.
setlocal foldlevel=1        " foldlevel of line
set splitbelow
set splitright
set scrolloff=0

" For Mac, copy current line to system clipboard
" We don't need map paste in VIM, because we just use this for paste content
" from vim to external program.
map <F2> :.w !pbcopy<CR><CR>
inoremap jk <esc>
noremap <Leader>< <esc>:res -10<CR>
noremap <Leader>> <esc>:res +10<CR>
" With clipboard, then you can copy yy/dd from VIM clipboard to your system clipboard
set clipboard=unnamed

" return OS type, eg: windows, or linux, mac, et.st..
function! MySys()
    if has("win16") || has("win32") || has("win64") || has("win95")
        return "windows"
    elseif has("unix")
        return "linux"
    endif
endfunction

" Set the location of $VIMFILES on different OS
if MySys() == "windows"
    let $VIMFILES = $VIM.'/vimfiles'
    let $VIMCONF  = '_vimrc'
elseif MySys() == "linux"
    let $VIMFILES = $HOME.'/.vim'
    let $VIMCONF  = '.vimrc'
endif

" Set help doc path
let helptags=$VIMFILES.'/doc'

" Set font
if has("win32")
    set guifont="Courier New:h12:cANSI"
else
    set guifont="MesloLGMDZ Nerd Font:h12:cANSI"
endif

" Settings for multi_byte environment
if has("multi_byte")
    " UTF-8
    set encoding=utf-8
    set termencoding=utf-8
    set formatoptions+=mM
    set fencs=utf-8,gbk

    if v:lang =~? '^\(zh\)\|\(ja\)\|\(ko\)'
        set ambiwidth=double
    endif

    if has("win32")
        source $VIMRUNTIME/delmenu.vim
        source $VIMRUNTIME/menu.vim
        language messages zh_CN.utf-8
    endif
else
    echoerr "Sorry, this version of (g)vim was not compiled with +multi_byte"
endif


" Enable CSS for Tohtml
" syntax/2html.vim:runtime! syntax/2html.vim
let html_use_css=1

" Settings for Python, for example, no tab
" With foldmethod=indent, you can use za to fold/unfold python functions
autocmd FileType python set tabstop=4 shiftwidth=4 expandtab foldmethod=indent foldlevel=99
autocmd FileType python map <F10> :!python %<CR>

" Ctrl+c to copy in Visual mode and selected something
vmap <C-c> "+y

let b:javascript_fold=1
let javascript_enable_domhtmlcss=1

" Set dict path
autocmd filetype javascript set dictionary=$VIMFILES/dict/javascript.dict
autocmd filetype css set dictionary=$VIMFILES/dict/css.dict
autocmd filetype php set dictionary=$VIMFILES/dict/php.dict

let mapleader = ","

" This is an alternative map for autochdir.
nnoremap <leader>cd :cd %:p:h<CR>:pwd<CR>

"Fast reloading of the .vimrc
map <silent> <Leader>ss :source $HOME/$VIMCONF<cr>
"Fast editing of .vimrc
map <silent> <Leader>ee :e $HOME/$VIMCONF<cr>
"When .vimrc is edited, reload it
autocmd! bufwritepost $VIMCONF source $HOME/$VIMCONF

" save the file
" map <Leader>w :w<cr>
map ,w :w<cr>
" quit
map ,q :q<cr>
" save and quit
map ,z ZZ

set fileformats=unix,dos,mac
nmap <Leader>fd :se fileformat=dos<CR>
nmap <Leader>fu :se fileformat=unix<CR>

" Shortcuts for buffers
nnoremap <Leader>bn :bnext<CR>
nnoremap <Leader>bp :bprevious<CR>

" Map navigation splits
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l


" Now you can see tab as »---, trail, extends, preceds.
set listchars=eol:¶,tab:»\ ,trail:·,extends:>,precedes:<
set list

" Toggle folds open/closed by pressing F9.
" In addition, if you have :set foldmethod=manual, you can visually select
" some lines, then press F9 to create a fold.
inoremap <F9> <C-O>za
nnoremap <F9> za
onoremap <F9> <C-C>za
vnoremap <F9> zf

" Map tabs operations
nnoremap <Leader>tn :tabnext<CR>
nnoremap <Leader>tp :tabprev<CR>
map <Leader>t1 1gt
map <Leader>t2 2gt
map <Leader>t3 3gt
map <Leader>t4 4gt
map <Leader>t5 5gt
map <Leader>t6 6gt
map <Leader>t7 7gt
map <Leader>t8 8gt
map <Leader>t9 9gt
map <Leader>tnew :tabnew<CR>
map <Leader>tc :tabclose<CR>

" Stop highlighted text
nnoremap <Leader><space> :noh<CR>

" For quick jumping to line number
" nnoremap <CR> G

" To paste from another application:
" 1. Start insert mode.
" 2. Press F2 (toggles the 'paste' option on).
" 3. Use your terminal to paste text from the clipboard.
" 4. Press F2 (toggles the 'paste' option off).
" Then the existing indentation of the pasted text will be retained.
set pastetoggle=<F2>
set showmode

function! GotoJump()
  jumps
  let j = input("Please select your jump: ")
  if j != ''
    let pattern = '\v\c^\+'
    if j =~ pattern
      let j = substitute(j, pattern, '', 'g')
      execute "normal " . j . "\<c-i>"
    else
      execute "normal " . j . "\<c-o>"
    endif
  endif
endfunction

nmap <Leader>jj :call GotoJump()<CR>

function! GrepCurrentFile()
  execute 'vimgrep '.expand('<cword>').' '.expand('%') | :copen | :cc
endfunction
" Easily GREP current word in current file.
nmap <Leader>sc :call GrepCurrentFile()<CR>
function! GrepRecursionFile()
  execute 'vimgrep '.expand('<cword>').' '.expand('%').' *.*' | :copen | :cc
endfunction
" Easily GREP current word in all recurise file.
nmap <Leader>sr :call GrepRecursionFile()<CR>

nnoremap [q    :cprev<CR> :norm! zz<CR>
nnoremap ]q    :cnext<CR> :norm! zz<CR>
nnoremap [Q    :cfirst<CR> :norm! zz<CR>
nnoremap ]Q    :clast<CR> :norm! zz<CR>

" Shortcuts for resizing slit windows
nnoremap <silent> <Leader>+ :resize +5 <CR>
nnoremap <silent> <Leader>- :resize -5 <CR>
nnoremap <silent> <Leader><Right> :vertical resize +5 <CR>
nnoremap <silent> <Leader><Left> :vertical resize -5 <CR>

"-----------------------------------------------------------------
" plugin - vimairline
"-----------------------------------------------------------------
let g:airline_powerline_fonts = 1  " Using powerline font
" enable/disable enhanced tabline.
let g:airline#extensions#tabline#enabled = 1
" integrated with syntastic
let g:airline#extensions#syntastic#enabled = 1
" integrated with tagbar
let g:airline#extensions#tagbar#enabled = 1
" enable/disable showing a summary of changed hunks under source control
let g:airline#extensions#hunks#enabled = 1
" enable/disable showing only non-zero hunks.
let g:airline#extensions#hunks#non_zero_only = 0
" set hunk count symbols.
let g:airline#extensions#hunks#hunk_symbols = ['+', '~', '-']

"-----------------------------------------------------------------
" plugin - vim-airline-themes
"-----------------------------------------------------------------
let g:airline_theme="tomorrow"
" let g:airline_theme="simple"
" let g:airline_theme="molokai"
" let g:airline_theme="violet"

"-----------------------------------------------------------------
" plugin - sjl/gundo.vim
"-----------------------------------------------------------------
nnoremap <F5> :GundoToggle<CR>

"-----------------------------------------------------------------
" plugin - ctrlp
" Ctrl+f: will switch between modes
" Ctrl+k/j: go up/down
" Ctrl+v/x: open file vertical/horizontal
" Ctrl+t: open file in a new tab
" Ctrl+y: create file(including folder) not exist
" Ctrl+z: mark files
" Ctrl+o: open all marked files
" F5: Refresh cache
" CtrlPMixed: Search in mix mode, including file/buf/MRU
" CtrlPLine: Search lines
"-----------------------------------------------------------------
nnoremap <C-S-p> :CtrlP<CR>
nnoremap <C-S-t> :CtrlPTag<CR>
" Sane Ignore For ctrlp
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git$|vendor\|\.hg$\|\.svn$\|\.yardoc\|public\/images\|public\/system\|tmp$',
  \ 'file': '\.exe$\|\.so$\|\.dat$|\.a$|\.la$|\.swp$|\.jpg$|\.bmp$|\.gif$|\.ico$|\.png$'
  \ }

"-----------------------------------------------------------------
" plugin - NERD_tree.vim
" :ERDtree Open NERD_tree         :NERDtreeClose   Close NERD_tree
" o open                        t open in tab
" T open in background tab      ! execute the selected file
" p upper level                 P go to root node
" K goto first node             J goto last node
" u open upper level            m display menu
" r refresh current folder recursively  R refresh root folder recursively
"-----------------------------------------------------------------
" Make it show when vim has a directory.
if isdirectory(argv(0))
    bd
    autocmd vimenter * exe "cd" argv(0)
    autocmd VimEnter * NERDTree
endif

" F3 NERDTree toggle
map <F3> :NERDTreeToggle<CR>
imap <F3> <ESC>:NERDTreeToggle<CR>
let g:NERDTreeChDirMode       = 2
let g:ctrlp_working_path_mode = 'a'
let NERDTreeShowBookmarks=1

"-----------------------------------------------------------------
" plugin - majutsushi/tagbar
"-----------------------------------------------------------------
nmap <F8> :TagbarToggle<CR>

"-----------------------------------------------------------------
" plugin - scrooloose/syntastic
"-----------------------------------------------------------------
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_java_javac_classpath = '~/brant/mac_brant_tools/libs/jar/javaxt-core.jar'
" Don't want to enable syntastic for python script automatically
let g:syntastic_mode_map = { 'passive_filetypes': ['python'] }

"-----------------------------------------------------------------
" plugin - buffergator.vim
" \bs 上下方式查看
" ps split vertically
" pi split horizonlly
" po open in place
"-----------------------------------------------------------------
nnoremap <silent> <Leader>bs :BuffergatorOpen<CR>
nnoremap <silent> <Leader>bc :BuffergatorClose<CR>

"-----------------------------------------------------------------
" plugin - NERD_commenter.vim
" [count],cc comment out the [count] line(s) from cursor line in visual mode
" [count],cu uncomment out the [count] line(s) from cursor line in visual mode
" [count],cm Comments the given lines using only one set of multipart delimiters.
" ,cA Adds comment delimiters to the end of line and goes into insert mode between them.
"-----------------------------------------------------------------
let NERDSpaceDelims=1
let NERDCompactSexyComs=1

"-----------------------------------------------------------------
" plugin - DoxygenToolkit.vim
"-----------------------------------------------------------------
let g:DoxygenToolkit_authorName="Asins - asinsimple AT gmail DOT com"
let g:DoxygenToolkit_briefTag_funcName="yes"
map <Leader>df :Dox<CR>
map <Leader>db :DoxBlock<CR>
map <Leader>dc a /*  */<LEFT><LEFT><LEFT>

"-----------------------------------------------------------------
" plugin - Conque
"-----------------------------------------------------------------
let g:ConqueTerm_StartMessages = 0
nnoremap <Leader>ba     :ConqueTermSplit bash<CR>
nnoremap <Leader>bah    :ConqueTermSplit bash<CR>
nnoremap <Leader>bav    :ConqueTermVSplit bash<CR>

"-----------------------------------------------------------------
" plugin - YCM
"-----------------------------------------------------------------
let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']

"-----------------------------------------------------------------
" plugin - UltiSnips
"-----------------------------------------------------------------
let g:UltiSnipsExpandTrigger="<c-j>"
" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

"-----------------------------------------------------------------
" plugin - easymotion
" Integration with incsearch.vim
"-----------------------------------------------------------------
let g:EasyMotion_enter_jump_first = 1
let g:EasyMotion_space_jump_first = 1
let g:EasyMotion_disable_two_key_combo = 0
map  <Leader>f <Plug>(easymotion-bd-f)

"-----------------------------------------------------------------
" plugin - incsearch
" We don't need set basic usage here, because above easymotion
" already integrated it.
" Brant: Comment out "map /", because it will invalid C-v for pasting to /
"-----------------------------------------------------------------
" map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
" Automatic nohlsearch
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

"-----------------------------------------------------------------
" plugin - incsearch-fuzzy
"-----------------------------------------------------------------
" Use fuzzy & fuzzyspell feature both
function! s:config_fuzzyall(...) abort
  return extend(copy({
  \   'converters': [
  \     incsearch#config#fuzzy#converter(),
  \     incsearch#config#fuzzyspell#converter()
  \   ],
  \ }), get(a:, 1, {}))
endfunction

noremap <silent><expr> z/ incsearch#go(<SID>config_fuzzyall())
noremap <silent><expr> z? incsearch#go(<SID>config_fuzzyall({'command': '?'}))
noremap <silent><expr> zg? incsearch#go(<SID>config_fuzzyall({'is_stay': 1}))

"-----------------------------------------------------------------
" plugin - incsearch-easymotion
"-----------------------------------------------------------------
function! s:config_easyfuzzymotion(...) abort
  return extend(copy({
  \   'converters': [incsearch#config#fuzzy#converter()],
  \   'modules': [incsearch#config#easymotion#module()],
  \   'keymap': {"\<CR>": '<Over>(easymotion)'},
  \   'is_expr': 0,
  \   'is_stay': 1
  \ }), get(a:, 1, {}))
endfunction

map x/ <Plug>(incsearch-easymotion-/)
map x? <Plug>(incsearch-easymotion-?)
map xg/ <Plug>(incsearch-easymotion-stay)
noremap <silent><expr> <Space>/ incsearch#go(<SID>config_easyfuzzymotion())

"-----------------------------------------------------------------
" plugin - vim-easygrep
"-----------------------------------------------------------------
" <Leader>vv - Grep for the word under the cursor, match all occurences,
"              like 'g*'.  See ":help gstar".
"<Leader>vV  - Grep for the word under the cursor, match whole word, like
"              '*'.  See ":help star".
"<Leader>va  - Like vv, but add to existing list.
"<Leader>vA  - Like vV, but add to existing list.
"<Leader>vo  - Display options.

"<Leader>vr  - Perform a global search on the word under the cursor
"              and prompt for a pattern with which to replace it.
"<Leader>vR  - Like vr, but match whole word.


"-----------------------------------------------------------------
" plugin - ctrlp-funky
"-----------------------------------------------------------------
nnoremap <Leader>fu :CtrlPFunky<Cr> " narrow the list down with a word under cursor
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>


"-----------------------------------------------------------------
" plugin - jedi-vim·
"-----------------------------------------------------------------
let g:jedi#goto_command="<leader>d"
let g:jedi#goto_definitions_command = ""
let g:jedi#documentation_command = "K"
let g:jedi#usages_command = "<leader>n"
let g:jedi#completions_command = "<C-Space>"
let g:jedi#rename_command = "<leader>r"

"-----------------------------------------------------------------
" plugin - yuttie/comfortable-motion
" below settings allows to scroll 35 lines with C-F
"-----------------------------------------------------------------
let g:comfortable_motion_friction = 122.0
let g:comfortable_motion_air_drag = 4.0

"-----------------------------------------------------------------
" plugin - 'thosakwe/vim-flutter'
"-----------------------------------------------------------------
nnoremap <leader>fa :FlutterRun<cr>
nnoremap <leader>fq :FlutterQuit<cr>
nnoremap <leader>fr :FlutterHotReload<cr>
nnoremap <leader>fR :FlutterHotRestart<cr>
nnoremap <leader>fD :FlutterVisualDebug<cr>

"-----------------------------------------------------------------
" plugin - 'mileszs/ack.vim'
" integrated with https://github.com/ggreer/the_silver_searcher
"-----------------------------------------------------------------
" let g:ackprg = 'ag --nogroup --nocolor --column'
if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif

"-----------------------------------------------------------------
" plugin - 'vim-go'
"-----------------------------------------------------------------
" disable using gopls in vim-go, it's annoying.
let g:go_gopls_enabled = 1
let g:go_def_mode='gopls'
let g:go_info_mode='gopls'
