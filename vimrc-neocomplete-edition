set nocompatible              " be improved, required
filetype off                  " required
set laststatus=2 " Let airline appear all the time

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required:
    Plugin 'VundleVim/Vundle.vim'
    Plugin 'bling/vim-airline'
    Plugin 'kien/ctrlp.vim'
    Plugin 'tacahiroy/ctrlp-funky'
    Plugin 'bling/vim-bufferline'
    Plugin 'sjl/gundo.vim'
    Plugin 'scrooloose/nerdtree'
    Plugin 'majutsushi/tagbar'
    Plugin 'airblade/vim-gitgutter'
    Plugin 'mhinz/vim-signify'
    Plugin 'scrooloose/syntastic'
    Plugin 'jeetsukumaran/vim-buffergator'
    Plugin 'scrooloose/nerdcommenter'
    Plugin 'vim-scripts/DoxygenToolkit.vim'
    Plugin 'terryma/vim-expand-region'
    Plugin 'rosenfeld/conque-term'
    Plugin 'easymotion/vim-easymotion'
    Plugin 'haya14busa/incsearch.vim'
    Plugin 'haya14busa/incsearch-fuzzy.vim'
    Plugin 'haya14busa/incsearch-easymotion.vim'
    Plugin 'dkprice/vim-easygrep'
    Plugin 'honza/vim-snippets'
    Plugin 'davidhalter/jedi-vim'
    Plugin 'Shougo/neocomplete.vim'
    Plugin 'Shougo/neosnippet'
    Plugin 'xkdcc/Session-Viminfo-Management'
    Plugin 'yuttie/comfortable-motion.vim'
    Plugin 'dart-lang/dart-vim-plugin'
    Plugin 'thosakwe/vim-flutter'
    Plugin 'Yggdroot/indentLine'
    Plugin 'tpope/vim-surround'
    Plugin 'AndrewRadev/tagalong.vim

    " All of your Plugins must be added before the following line
    call vundle#end()            " required
    filetype plugin indent on    " required
    " To ignore plugin indent changes, instead use:
    "filetype plugin on
    "
    " Brief help
    " :PluginList       - lists configured plugins
    " :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
    " :PluginSearch foo - searches for foo; append `!` to refresh local cache
    " :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
    "
    " see :h vundle for more details or wiki for FAQ
    " Put your non-Plugin stuff after this line



"-----------------------------------------------------------------
" General Settings
"-----------------------------------------------------------------
source $VIMRUNTIME/vimrc_example.vim
source $VIMRUNTIME/mswin.vim
set mouse=v
syntax on                   " Syntax Highlighting
set cc=80                   " Line length marker
filetype on
filetype plugin on
colorscheme molokai
highlight ColorColumn ctermbg=LightGrey guibg=DarkGrey " Set color of line length marker
" this must be after colorscheme if the default highlight color is not you want.
set number
set shiftwidth=4            " I highly recommend you to understand tab/space in Vim
set softtabstop=4           " by watching this http://vimcasts.org/episodes/tabs-and-spaces/
set tabstop=4
set expandtab
set nobackup
filetype plugin indent on   " turns on "detection", "plugin" and "indent" at once.
set backupcopy=yes          " make a copy of the file and overwrite the original one when writing a file
set ignorecase smartcase
set nowrapscan              " No searches wrap around the end of the file.
set incsearch
set noerrorbells
set novisualbell
set t_vb=                   " Set visual bell to empty
set magic
set hidden                  " When on a buffer becomes hidden when it is abandoned
set guioptions-=T           " Remove toolbar in GUI mode, like Win32, GTK+, Motif
set guioptions-=m           " Remove menubar in GUI mode, like Win32, GTK+, Motif
set smartindent             " Do smart autoindenting when starting a new line.
set backspace=indent,eol,start
set foldenable
set foldmethod=marker       " Markers are used to specify folds.
set foldcolumn=0
setlocal foldlevel=1
set splitbelow
set splitright

" For Mac, copy current line to system clipboard
" We don't need map paste in VIM, because we just use this for paste content
" from vim to external program.
map <F2> :.w !pbcopy<CR><CR>
inoremap jk <esc>
noremap <Leader>< <esc>:res -10<CR>
noremap <Leader>> <esc>:res +10<CR>

" return OS type, eg: windows, or linux, mac, et.st..
function! MySys()
    if has("win16") || has("win32") || has("win64") || has("win95")
        return "windows"
    elseif has("unix")
        return "linux"
    endif
endfunction

" User space $VIMFILES
if MySys() == "windows"
    let $VIMFILES = $VIM.'/vimfiles'
    let $VIMCONF  = '_vimrc'
elseif MySys() == "linux"
    let $VIMFILES = $HOME.'/.vim'
    let $VIMCONF  = '.vimrc'
endif

" set doc path
let helptags=$VIMFILES.'/doc'

if has("win32")
    set guifont="Courier New:h12:cANSI"
endif

" Support multi_byte languages, like Chinese
if has("multi_byte")
    set encoding=utf-8
    set termencoding=utf-8
    set formatoptions+=mM
    set fencs=utf-8,gbk

    if v:lang =~? '^\(zh\)\|\(ja\)\|\(ko\)'
        set ambiwidth=double
    endif

    if has("win32")
        source $VIMRUNTIME/delmenu.vim
        source $VIMRUNTIME/menu.vim
        language messages zh_CN.utf-8
    endif
else
    echoerr "Sorry, this version of (g)vim was not compiled with +multi_byte"
endif


" Let Tohtml to generate html with CSS
" syntax/2html.vim，Usage:runtime! syntax/2html.vim
let html_use_css=1

" Python settings
autocmd FileType python set tabstop=4 shiftwidth=4 expandtab
autocmd FileType python map <F10> :!python %<CR>

" Support Ctrl+c to copy in Visual selection mode
vmap <C-c> "+y

let b:javascript_fold=1
let javascript_enable_domhtmlcss=1

autocmd filetype javascript set dictionary=$VIMFILES/dict/javascript.dict
autocmd filetype css set dictionary=$VIMFILES/dict/css.dict
autocmd filetype php set dictionary=$VIMFILES/dict/php.dict

let mapleader = ","

" This is an alternative map for autochdir.
nnoremap <leader>cd :cd %:p:h<CR>:pwd<CR>

"Fast reloading of the .vimrc
map <silent> <Leader>ss :source $HOME/$VIMCONF<cr>
"Fast editing of .vimrc
map <silent> <Leader>ee :e $HOME/$VIMCONF<cr>
"When .vimrc is edited, reload it
autocmd! bufwritepost $VIMCONF source $HOME/$VIMCONF

" save the file
" map <Leader>w :w<cr>
map ,w :w<cr>
" quit
map ,q :q<cr>
" save and quit
map ,z ZZ

set fileformats=unix,dos,mac
nmap <Leader>fd :se fileformat=dos<CR>
nmap <Leader>fu :se fileformat=unix<CR>

" Buffers shortcuts
nnoremap <Leader>bn :bnext<CR>
nnoremap <Leader>bp :bprevious<CR>

" Map navigation splits
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l


" Now you can see tab as »---, trail, extends, preceds.
set listchars=eol:¶,tab:»\ ,trail:·,extends:>,precedes:<
set list

" Toggle folds open/closed by pressing F9.
" In addition, if you have :set foldmethod=manual, you can visually select
" some lines, then press F9 to create a fold.
inoremap <F9> <C-O>za
nnoremap <F9> za
onoremap <F9> <C-C>za
vnoremap <F9> zf

" Map tabs operations
nnoremap <Leader>tn :tabnext<CR>
nnoremap <Leader>tp :tabprev<CR>
map <Leader>t1 1gt
map <Leader>t2 2gt
map <Leader>t3 3gt
map <Leader>t4 4gt
map <Leader>t5 5gt
map <Leader>t6 6gt
map <Leader>t7 7gt
map <Leader>t8 8gt
map <Leader>t9 9gt
map <Leader>tnew :tabnew<CR>
map <Leader>tc :tabclose<CR>

" Stop highlighted text
nnoremap <Leader><space> :noh<CR>

" For quick jumping to line number
" nnoremap <CR> G

" To paste from another application:
" 1. Start insert mode.
" 2. Press F2 (toggles the 'paste' option on).
" 3. Use your terminal to paste text from the clipboard.
" 4. Press F2 (toggles the 'paste' option off).
" Then the existing indentation of the pasted text will be retained.
set pastetoggle=<F2>
set showmode

function! GotoJump()
  jumps
  let j = input("Please select your jump: ")
  if j != ''
    let pattern = '\v\c^\+'
    if j =~ pattern
      let j = substitute(j, pattern, '', 'g')
      execute "normal " . j . "\<c-i>"
    else
      execute "normal " . j . "\<c-o>"
    endif
  endif
endfunction

nmap <Leader>jj :call GotoJump()<CR>

function! GrepCurrentFile()
  execute 'vimgrep '.expand('<cword>').' '.expand('%') | :copen | :cc
endfunction
" Easily GREP current word in current file.
nmap <Leader>sc :call GrepCurrentFile()<CR>
function! GrepRecursionFile()
  execute 'vimgrep '.expand('<cword>').' '.expand('%').' *.*' | :copen | :cc
endfunction
" Easily GREP current word in all recurise file.
nmap <Leader>sr :call GrepRecursionFile()<CR>

nnoremap [q    :cprev<CR> :norm! zz<CR>
nnoremap ]q    :cnext<CR> :norm! zz<CR>
nnoremap [Q    :cfirst<CR> :norm! zz<CR>
nnoremap ]Q    :clast<CR> :norm! zz<CR>

"-----------------------------------------------------------------
" plugin - powerline
"-----------------------------------------------------------------
let g:airline_powerline_fonts = 1  " Using powerline font

"-----------------------------------------------------------------
" plugin - sjl/gundo.vim
"-----------------------------------------------------------------
nnoremap <F5> :GundoToggle<CR>

"-----------------------------------------------------------------
" plugin - ctrlp
" Ctrl+f: will switch between modes
" Ctrl+k/j: go up/down
" Ctrl+v/x: open file vertical/horizontal
" Ctrl+t: open file in a new tab
" Ctrl+y: create file(including folder) not exist
" Ctrl+z: mark files
" Ctrl+o: open all marked files
" F5: Refresh cache
" CtrlPMixed: Search in mix mode, including file/buf/MRU
" CtrlPLine: Search lines
"-----------------------------------------------------------------
nnoremap <C-S-p> :CtrlP<CR>
nnoremap <C-S-t> :CtrlPTag<CR>
" Sane Ignore For ctrlp
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git$|vendor\|\.hg$\|\.svn$\|\.yardoc\|public\/images\|public\/system\|tmp$',
  \ 'file': '\.exe$\|\.so$\|\.dat$|\.a$|\.la$|\.swp$|\.jpg$|\.bmp$|\.gif$|\.ico$|\.png$'
  \ }

"-----------------------------------------------------------------
" plugin - NERD_tree.vim
" :ERDtree Open NERD_tree         :NERDtreeClose    Close NERD_tree
" o open folder                 t open in tab
" T open in tab in background   ! execute file
" p go to upper folder          P go to root folder
" K got last node               J go to the end
" u open upper folder           m display menu of file system
" r recursive current folder    R recursive current root folder
"-----------------------------------------------------------------
" Make it show when vim has a directory.
if isdirectory(argv(0))
    bd
    autocmd vimenter * exe "cd" argv(0)
    autocmd VimEnter * NERDTree
endif

" F3 NERDTree toggle
map <F3> :NERDTreeToggle<CR>
imap <F3> <ESC>:NERDTreeToggle<CR>
" With below settings, ctrlp will sync up if change root dir in NerdTree.
let g:NERDTreeChDirMode       = 2
let g:ctrlp_working_path_mode = 'a'
let NERDTreeShowBookmarks=1

"-----------------------------------------------------------------
" plugin - majutsushi/tagbar
"-----------------------------------------------------------------
nmap <F8> :TagbarToggle<CR>

"-----------------------------------------------------------------
" plugin - scrooloose/syntastic
"-----------------------------------------------------------------
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

"-----------------------------------------------------------------
" plugin - buffergator.vim Buffers switch
" \bs vertical view
" ps split vertically
" pi split horizonlly
" po open in place
"-----------------------------------------------------------------
nnoremap <silent> <Leader>bs :BuffergatorOpen<CR>
nnoremap <silent> <Leader>bc :BuffergatorClose<CR>

"-----------------------------------------------------------------
" plugin - NERD_commenter.vim
" [count],cc comment out: (7,cc)
" [count],cu uncomment out: (7,cu)
" [count],cm block comment: (7,cm)
" ,cA Insert /* */ at the end of line and entering insert mode.
"-----------------------------------------------------------------
let NERDSpaceDelims=1
let NERDCompactSexyComs=1

"-----------------------------------------------------------------
" plugin - DoxygenToolkit.vim
"-----------------------------------------------------------------
let g:DoxygenToolkit_authorName="Asins - asinsimple AT gmail DOT com"
let g:DoxygenToolkit_briefTag_funcName="yes"
map <Leader>df :Dox<CR>
map <Leader>db :DoxBlock<CR>
map <Leader>dc a /*  */<LEFT><LEFT><LEFT>

"-----------------------------------------------------------------
" plugin - Conque
"-----------------------------------------------------------------
let g:ConqueTerm_StartMessages = 0
nnoremap <Leader>ba     :ConqueTermSplit bash<CR>
nnoremap <Leader>bah    :ConqueTermSplit bash<CR>
nnoremap <Leader>bav    :ConqueTermVSplit bash<CR>

"-----------------------------------------------------------------
" plugin - jedi-vim
"-----------------------------------------------------------------
let g:jedi#goto_command = "<leader>d"
let g:jedi#goto_assignments_command = "<leader>g"
let g:jedi#goto_definitions_command = ""
let g:jedi#documentation_command = "K"
let g:jedi#usages_command = "<leader>n"
let g:jedi#completions_command = "<C-Space>"
let g:jedi#rename_command = "<leader>r"

"-----------------------------------------------------------------
" plugin - easymotion
" Integration with incsearch.vim
"-----------------------------------------------------------------
let g:EasyMotion_enter_jump_first = 1
let g:EasyMotion_space_jump_first = 1
let g:EasyMotion_disable_two_key_combo = 0
map  <Leader>f <Plug>(easymotion-bd-f)

"-----------------------------------------------------------------
" plugin - incsearch
" We don't need set basic usage here, because above easymotion
" already integrated it.
"-----------------------------------------------------------------
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
" Automatic nohlsearch
let g:incsearch#auto_nohlsearch = 1
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)

"-----------------------------------------------------------------
" plugin - incsearch-fuzzy
"-----------------------------------------------------------------
" Use fuzzy & fuzzyspell feature both
function! s:config_fuzzyall(...) abort
  return extend(copy({
  \   'converters': [
  \     incsearch#config#fuzzy#converter(),
  \     incsearch#config#fuzzyspell#converter()
  \   ],
  \ }), get(a:, 1, {}))
endfunction

noremap <silent><expr> z/ incsearch#go(<SID>config_fuzzyall())
noremap <silent><expr> z? incsearch#go(<SID>config_fuzzyall({'command': '?'}))
noremap <silent><expr> zg? incsearch#go(<SID>config_fuzzyall({'is_stay': 1}))

"-----------------------------------------------------------------
" plugin - incsearch-easymotion
"-----------------------------------------------------------------
function! s:config_easyfuzzymotion(...) abort
  return extend(copy({
  \   'converters': [incsearch#config#fuzzy#converter()],
  \   'modules': [incsearch#config#easymotion#module()],
  \   'keymap': {"\<CR>": '<Over>(easymotion)'},
  \   'is_expr': 0,
  \   'is_stay': 1
  \ }), get(a:, 1, {}))
endfunction

noremap <silent><expr> <Space>/ incsearch#go(<SID>config_easyfuzzymotion())

"-----------------------------------------------------------------
" plugin - vim-easygrep
"-----------------------------------------------------------------
" <Leader>vv  - Grep for the word under the cursor, match all occurences,
"              like 'g*'.  See ":help gstar".
"<Leader>vV  - Grep for the word under the cursor, match whole word, like
"              '*'.  See ":help star".
"<Leader>va  - Like vv, but add to existing list.
"<Leader>vA  - Like vV, but add to existing list.

"<Leader>vr  - Perform a global search on the word under the cursor
"              and prompt for a pattern with which to replace it.
"<Leader>vR  - Like vr, but match whole word.


"-----------------------------------------------------------------
" plugin - ctrlp-funky
"-----------------------------------------------------------------
nnoremap <Leader>fu :CtrlPFunky<Cr>
" narrow the list down with a word under cursor
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>

"-----------------------------------------------------------------
" plugin - neosnippet
"-----------------------------------------------------------------
" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif

" Default snippets files are available in: neosnippet-snippets
" Installing default snippets is optional. If choose not to install them, you
" must deactivate them with disable_runtime_snippets.
" which disables all runtime snippets
let g:neosnippet#disable_runtime_snippets = {
\   '_' : 1,
\ }

let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'

"-----------------------------------------------------------------
" plugin - Shougo/neocomplete.vim
"-----------------------------------------------------------------
"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 1
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS>  neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
autocmd FileType cs setlocal omnifunc=OmniSharp#Complete

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif

"-----------------------------------------------------------------
" plugin - yuttie/comfortable-motion
" below settings allows to scroll 35 lines with C-F
"-----------------------------------------------------------------
let g:comfortable_motion_friction = 122.0
let g:comfortable_motion_air_drag = 4.0

"-----------------------------------------------------------------
" plugin - 'thosakwe/vim-flutter'
"-----------------------------------------------------------------
nnoremap <leader>fa :FlutterRun<cr>
nnoremap <leader>fq :FlutterQuit<cr>
nnoremap <leader>fr :FlutterHotReload<cr>
nnoremap <leader>fR :FlutterHotRestart<cr>
nnoremap <leader>fD :FlutterVisualDebug<cr>
